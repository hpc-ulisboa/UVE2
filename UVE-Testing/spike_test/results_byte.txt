Benchmarks sgd, spmv_ellpack and spmv_ellpack_delimiters use double type with fixed sizes
Benchmarks jacobi-1d and jacobi-2d use float or double type. Double will be used.
Running with typebyte[0m and size50[0m


### Attempting to compile and run kernel saxpy...

benchmarks/saxpy/kernel.c:186:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < SIZE; i++) {
    ^
benchmarks/saxpy/kernel.c:186:5: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 1) [-Rpass=loop-vectorize]

UVE executed 393 less instructions
RVV executed 57 more instructions
UVE executed 450 less instructions than RVV
|----------|-----|------------|----------------|
| Original | RVV | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 404      | 461 | 57         | 14.11          |
|----------|-----|------------|----------------|
| Original | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 404      | 11  | -393       | -97.28         |
|----------|-----|------------|----------------|
| RVV      | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 461      | 11  | -450       | -97.61         |
|----------|-----|------------|----------------|


Kernel saxpy is similar enough

### Attempting to compile and run kernel memcpy...

benchmarks/memcpy/kernel.c:117:2: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (int i = 0; i < SIZE; ++i) {
        ^
benchmarks/memcpy/kernel.c:117:2: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 1) [-Rpass=loop-vectorize]

UVE executed 246 less instructions
RVV executed 58 more instructions
UVE executed 304 less instructions than RVV
|----------|-----|------------|----------------|
| Original | RVV | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 253      | 311 | 58         | 22.92          |
|----------|-----|------------|----------------|
| Original | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 253      | 7   | -246       | -97.23         |
|----------|-----|------------|----------------|
| RVV      | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 311      | 7   | -304       | -97.75         |
|----------|-----|------------|----------------|


Kernel memcpy is similar enough

### Attempting to compile and run kernel jacobi-1d...

In file included from benchmarks/jacobi-1d/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:17:9: note: previous definition is here
#define DataType signed char
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:18:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:19:9: note: previous definition is here
#define DataFormat(start, end) start "%hhd" end
        ^
benchmarks/jacobi-1d/kernel.c:109:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 1; i < SIZE - 1; ++i)
    ^
benchmarks/jacobi-1d/kernel.c:109:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/jacobi-1d/kernel.c:112:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 1; i < SIZE - 1; ++i)
    ^
benchmarks/jacobi-1d/kernel.c:112:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 901 less instructions
RVV executed 766 less instructions
UVE executed 135 less instructions than RVV
|----------|-----|------------|----------------|
| Original | RVV | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 967      | 201 | -766       | -79.21         |
|----------|-----|------------|----------------|
| Original | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 967      | 66  | -901       | -93.17         |
|----------|-----|------------|----------------|
| RVV      | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 201      | 66  | -135       | -67.16         |
|----------|-----|------------|----------------|


Kernel jacobi-1d is similar enough

### Attempting to compile and run kernel jacobi-2d...

In file included from benchmarks/jacobi-2d/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:17:9: note: previous definition is here
#define DataType signed char
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:18:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:19:9: note: previous definition is here
#define DataFormat(start, end) start "%hhd" end
        ^
benchmarks/jacobi-2d/kernel.c:211:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int j = 1; j < SIZE - 1; j++) {
    ^
benchmarks/jacobi-2d/kernel.c:211:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/jacobi-2d/kernel.c:216:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int j = 1; j < SIZE - 1; j++) {
    ^
benchmarks/jacobi-2d/kernel.c:216:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 75533 less instructions
RVV executed 64590 less instructions
UVE executed 10943 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 79027    | 14437 | -64590     | -81.73         |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 79027    | 3494  | -75533     | -95.58         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 14437    | 3494  | -10943     | -75.80         |
|----------|-------|------------|----------------|


Kernel jacobi-2d is similar enough

### Attempting to compile and run kernel 3mm...

benchmarks/3mm/kernel.c:201:10: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
                for (k = 0; k < sizeK; k++)
                ^
benchmarks/3mm/kernel.c:201:10: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
benchmarks/3mm/kernel.c:201:10: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
benchmarks/3mm/kernel.c:201:10: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]

UVE executed 3766207 less instructions
RVV executed 309044 less instructions
UVE executed 3457163 less instructions than RVV
|----------|---------|------------|----------------|
| Original | RVV     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 3813103  | 3504059 | -309044    | -8.10          |
|----------|---------|------------|----------------|
| Original | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 3813103  | 46896   | -3766207   | -98.77         |
|----------|---------|------------|----------------|
| RVV      | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 3504059  | 46896   | -3457163   | -98.66         |
|----------|---------|------------|----------------|


Kernel 3mm is similar enough

### Attempting to compile and run kernel trisolv...

benchmarks/trisolv/kernel.c:286:18: remark: loop not vectorized: unsafe dependent memory operations in loop. Use #pragma loop distribute(enable) to allow loop distribution to attempt to isolate the offending operations into a separate loop
Unknown data dependence. Memory location is the same as accessed at benchmarks/trisolv/kernel.c:286:39 [-Rpass-analysis=loop-vectorize]
            x[i] -= L[i * SIZE + j] * x[j];
                 ^
benchmarks/trisolv/kernel.c:283:9: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
        for (int j = 0; j < i; ++j) {
        ^

UVE executed 12584 less instructions
RVV executed 1016 less instructions
UVE executed 11568 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 12996    | 11980 | -1016      | -7.82          |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 12996    | 412   | -12584     | -96.83         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 11980    | 412   | -11568     | -96.56         |
|----------|-------|------------|----------------|


Kernel trisolv is similar enough

### Attempting to compile and run kernel stream...

benchmarks/stream/kernel.c:383:5: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j=0; j<sizeN; j++)
    ^
benchmarks/stream/kernel.c:386:5: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j=0; j<sizeN; j++)
    ^
benchmarks/stream/kernel.c:389:5: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j=0; j<sizeN; j++)
    ^
benchmarks/stream/kernel.c:392:5: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j=0; j<sizeN; j++)
    ^

UVE executed 1383 less instructions
RVV executed 215 more instructions
UVE executed 1598 less instructions than RVV
|----------|------|------------|----------------|
| Original | RVV  | Difference | Difference (%) |
|----------|------|------------|----------------|
| 1415     | 1630 | 215        | 15.19          |
|----------|------|------------|----------------|
| Original | UVE  | Difference | Difference (%) |
|----------|------|------------|----------------|
| 1415     | 32   | -1383      | -97.74         |
|----------|------|------------|----------------|
| RVV      | UVE  | Difference | Difference (%) |
|----------|------|------------|----------------|
| 1630     | 32   | -1598      | -98.04         |
|----------|------|------------|----------------|


Kernel stream is similar enough

### Attempting to compile and run kernel mvt...

benchmarks/mvt/kernel.c:373:7: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
      for (int j = 0; j < sizeN; j++)
      ^
benchmarks/mvt/kernel.c:377:7: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
      for (int j = 0; j < sizeN; j++)
      ^
benchmarks/mvt/kernel.c:377:7: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 1) [-Rpass=loop-vectorize]

UVE executed 49941 less instructions
RVV executed 4478 less instructions
UVE executed 45463 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 50658    | 46180 | -4478      | -8.84          |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 50658    | 717   | -49941     | -98.58         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 46180    | 717   | -45463     | -98.45         |
|----------|-------|------------|----------------|


Kernel mvt is similar enough

### Attempting to compile and run kernel gemver...

benchmarks/gemver/kernel.c:627:9: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
        for (j = 0; j < sizeN; j++)
        ^
benchmarks/gemver/kernel.c:631:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (j = 0; j < sizeN; j++)
        ^
benchmarks/gemver/kernel.c:631:9: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/gemver/kernel.c:634:5: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
    for (i = 0; i < sizeN; i++)
    ^
benchmarks/gemver/kernel.c:638:9: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
        for (j = 0; j < sizeN; j++)
        ^

UVE executed 90321 less instructions
RVV executed 1715 less instructions
UVE executed 88606 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 91416    | 89701 | -1715      | -1.88          |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 91416    | 1095  | -90321     | -98.80         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 89701    | 1095  | -88606     | -98.78         |
|----------|-------|------------|----------------|


Kernel gemver is similar enough

### Attempting to compile and run kernel gemm...

benchmarks/gemm/kernel.c:342:8: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
       for (j = 0; j < sizeJ; j++)
       ^
benchmarks/gemm/kernel.c:339:5: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j = 0; j < sizeJ; j++)
    ^

UVE executed 1267836 less instructions
RVV executed 142897 more instructions
UVE executed 1410733 less instructions than RVV
|----------|---------|------------|----------------|
| Original | RVV     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 1278011  | 1420908 | 142897     | 11.18          |
|----------|---------|------------|----------------|
| Original | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 1278011  | 10175   | -1267836   | -99.20         |
|----------|---------|------------|----------------|
| RVV      | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 1420908  | 10175   | -1410733   | -99.28         |
|----------|---------|------------|----------------|


Kernel gemm is similar enough

### Attempting to compile and run kernel convolution...

benchmarks/convolution/kernel.c:250:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (x = 1; x < PB_H - 1; x++){
        ^
benchmarks/convolution/kernel.c:250:9: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 1) [-Rpass=loop-vectorize]

UVE executed 205392 less instructions
RVV executed 140253 less instructions
UVE executed 65139 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 233053   | 92800 | -140253    | -60.18         |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 233053   | 27661 | -205392    | -88.13         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 92800    | 27661 | -65139     | -70.19         |
|----------|-------|------------|----------------|


Kernel convolution is similar enough

### Attempting to compile and run kernel covariance...

benchmarks/covariance/kernel.c:488:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (i = 0; i < sizeN; i++)
        ^
benchmarks/covariance/kernel.c:488:9: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/covariance/kernel.c:502:9: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
        for (j = 0; j < sizeM; j++)
        ^
benchmarks/covariance/kernel.c:518:13: remark: vectorized loop (vectorization width: vscale x 8, interleaved count: 2) [-Rpass=loop-vectorize]
            for (k = 0; k < sizeN; k++)
            ^

RVV: Values were 1 and 0 with difference of 1 at index 21
RVV: Values were -1 and 0 with difference of 1 at index 37
RVV: Values were -2 and -1 with difference of 1 at index 170
RVV: Values were 1 and 0 with difference of 1 at index 292
RVV: Values were 1 and 0 with difference of 1 at index 425
RVV: Values were -2 and -1 with difference of 1 at index 448
RVV: Values were -1 and 0 with difference of 1 at index 474
RVV: Values were 2 and 1 with difference of 1 at index 520
RVV: Values were -2 and -1 with difference of 1 at index 547
RVV: Values were -1 and 0 with difference of 1 at index 624
RVV: Values were -2 and -1 with difference of 1 at index 686
RVV: Values were 1 and 0 with difference of 1 at index 779
RVV: Values were 2 and 1 with difference of 1 at index 838
RVV: Values were 1 and 0 with difference of 1 at index 926
RVV: Values were 1 and 0 with difference of 1 at index 948
RVV: Values were -2 and -1 with difference of 1 at index 1003
RVV: Values were 2 and 1 with difference of 1 at index 1010
RVV: Values were 1 and 0 with difference of 1 at index 1050
RVV: Values were -1 and 0 with difference of 1 at index 1077
RVV: Values were -2 and -1 with difference of 1 at index 1184
RVV: Values were 2 and 1 with difference of 1 at index 1190
RVV: Values were -1 and 0 with difference of 1 at index 1199
RVV: Values were -1 and 0 with difference of 1 at index 1209
RVV: Values were -1 and 0 with difference of 1 at index 1212
RVV: Values were 1 and 0 with difference of 1 at index 1258
RVV: Values were 1 and 0 with difference of 1 at index 1318
RVV: Values were -1 and 0 with difference of 1 at index 1371
RVV: Values were 1 and 0 with difference of 1 at index 1465
RVV: Values were -1 and 0 with difference of 1 at index 1645
RVV: Values were -2 and -1 with difference of 1 at index 1723
RVV: Values were -2 and -1 with difference of 1 at index 1813
RVV: Values were -1 and 0 with difference of 1 at index 1850
RVV: Values were 2 and 1 with difference of 1 at index 1916
RVV: Values were -2 and -1 with difference of 1 at index 1995
RVV: Values were 2 and 1 with difference of 1 at index 2023
RVV: Values were 1 and 0 with difference of 1 at index 2105
RVV: Values were -1 and 0 with difference of 1 at index 2143
RVV: Values were 2 and 1 with difference of 1 at index 2147
RVV: Values were -1 and 0 with difference of 1 at index 2192
RVV: Values were -1 and 0 with difference of 1 at index 2282
RVV: Values were -2 and -1 with difference of 1 at index 2289
RVV: Values were -2 and -1 with difference of 1 at index 2360
RVV: Values were 2 and 1 with difference of 1 at index 2392
RVV: Values were -2 and -1 with difference of 1 at index 2408
RVV: Values were 1 and 0 with difference of 1 at index 2418
RVV: Values were -1 and 0 with difference of 1 at index 2473
UVE executed 811294 less instructions
RVV executed 169534 less instructions
UVE executed 641760 less instructions than RVV
|----------|--------|------------|----------------|
| Original | RVV    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 823153   | 653619 | -169534    | -20.60         |
|----------|--------|------------|----------------|
| Original | UVE    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 823153   | 11859  | -811294    | -98.56         |
|----------|--------|------------|----------------|
| RVV      | UVE    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 653619   | 11859  | -641760    | -98.19         |
|----------|--------|------------|----------------|


Kernel covariance: Did not generate result similar enough

### Attempting to compile and run kernel sgd...

In file included from benchmarks/sgd/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:17:9: note: previous definition is here
#define DataType signed char
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:18:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:19:9: note: previous definition is here
#define DataFormat(start, end) start "%hhd" end
        ^
benchmarks/sgd/kernel.c:276:13: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
            for (j = 0; j /*< BATCH_SIZE && b + j*/ < PB_N; j++)
            ^
benchmarks/sgd/kernel.c:276:13: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:265:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (i = 0; i < PB_N /*BATCH_SIZE*/; i++)
        ^
benchmarks/sgd/kernel.c:265:9: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:257:9: remark: loop not vectorized: cannot identify array bounds [-Rpass-analysis=loop-vectorize]
        for (i = 0; i /*< BATCH_SIZE && b+i*/ < PB_N; i++) {
        ^
benchmarks/sgd/kernel.c:257:9: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
benchmarks/sgd/kernel.c:289:5: remark: loop not vectorized: cannot identify array bounds [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++) {
    ^
benchmarks/sgd/kernel.c:289:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
benchmarks/sgd/kernel.c:301:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:301:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:306:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:306:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:310:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:310:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:289:5: remark: loop not vectorized: cannot identify array bounds [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++) {
    ^
benchmarks/sgd/kernel.c:289:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
benchmarks/sgd/kernel.c:301:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:301:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:306:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:306:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:310:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:310:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 6352731 less instructions
RVV executed 5574941 less instructions
UVE executed 777790 less instructions than RVV
|----------|---------|------------|----------------|
| Original | RVV     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 7031115  | 1456174 | -5574941   | -79.29         |
|----------|---------|------------|----------------|
| Original | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 7031115  | 678384  | -6352731   | -90.35         |
|----------|---------|------------|----------------|
| RVV      | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 1456174  | 678384  | -777790    | -53.41         |
|----------|---------|------------|----------------|


Kernel sgd is similar enough

### Attempting to compile and run kernel spmv_ellpack...

In file included from benchmarks/spmv_ellpack/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:17:9: note: previous definition is here
#define DataType signed char
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:18:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:19:9: note: previous definition is here
#define DataFormat(start, end) start "%hhd" end
        ^
benchmarks/spmv_ellpack/kernel.c:62:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (j = 0; j < L; j++) {
        ^
benchmarks/spmv_ellpack/kernel.c:62:9: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 46932 less instructions
RVV executed 22223 less instructions
UVE executed 24709 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 51390    | 29167 | -22223     | -43.24         |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 51390    | 4458  | -46932     | -91.33         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 29167    | 4458  | -24709     | -84.72         |
|----------|-------|------------|----------------|


Kernel spmv_ellpack is similar enough

### Attempting to compile and run kernel spmv_ellpack_delimiters...

In file included from benchmarks/spmv_ellpack_delimiters/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:17:9: note: previous definition is here
#define DataType signed char
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:18:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:19:9: note: previous definition is here
#define DataFormat(start, end) start "%hhd" end
        ^
benchmarks/spmv_ellpack_delimiters/kernel.c:75:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (int j = 0; j < cur_nnz; j++) {
        ^
benchmarks/spmv_ellpack_delimiters/kernel.c:75:9: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 21394 less instructions
RVV executed 3888 more instructions
UVE executed 25282 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 24881    | 28769 | 3888       | 15.63          |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 24881    | 3487  | -21394     | -85.99         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 28769    | 3487  | -25282     | -87.88         |
|----------|-------|------------|----------------|


Kernel spmv_ellpack_delimiters is similar enough
