Benchmarks sgd, spmv_ellpack and spmv_ellpack_delimiters use double type with fixed sizes
Benchmarks jacobi-1d and jacobi-2d use float or double type. Double will be used.
Running with typeinteger[0m and size50[0m


### Attempting to compile and run kernel saxpy...

benchmarks/saxpy/kernel.c:186:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < SIZE; i++) {
    ^
benchmarks/saxpy/kernel.c:186:5: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 1) [-Rpass=loop-vectorize]

UVE executed 383 less instructions
RVV executed 334 less instructions
UVE executed 49 less instructions than RVV
|----------|-----|------------|----------------|
| Original | RVV | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 403      | 69  | -334       | -82.88         |
|----------|-----|------------|----------------|
| Original | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 403      | 20  | -383       | -95.04         |
|----------|-----|------------|----------------|
| RVV      | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 69       | 20  | -49        | -71.01         |
|----------|-----|------------|----------------|


Kernel saxpy is similar enough

### Attempting to compile and run kernel memcpy...

benchmarks/memcpy/kernel.c:117:2: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (int i = 0; i < SIZE; ++i) {
        ^
benchmarks/memcpy/kernel.c:117:2: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 1) [-Rpass=loop-vectorize]

UVE executed 240 less instructions
RVV executed 201 less instructions
UVE executed 39 less instructions than RVV
|----------|-----|------------|----------------|
| Original | RVV | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 253      | 52  | -201       | -79.45         |
|----------|-----|------------|----------------|
| Original | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 253      | 13  | -240       | -94.86         |
|----------|-----|------------|----------------|
| RVV      | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 52       | 13  | -39        | -75.00         |
|----------|-----|------------|----------------|


Kernel memcpy is similar enough

### Attempting to compile and run kernel jacobi-1d...

In file included from benchmarks/jacobi-1d/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:31:9: note: previous definition is here
#define DataType int
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:32:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:33:9: note: previous definition is here
#define DataFormat(start, end) start "%d" end
        ^
benchmarks/jacobi-1d/kernel.c:109:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 1; i < SIZE - 1; ++i)
    ^
benchmarks/jacobi-1d/kernel.c:109:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/jacobi-1d/kernel.c:112:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 1; i < SIZE - 1; ++i)
    ^
benchmarks/jacobi-1d/kernel.c:112:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 901 less instructions
RVV executed 766 less instructions
UVE executed 135 less instructions than RVV
|----------|-----|------------|----------------|
| Original | RVV | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 967      | 201 | -766       | -79.21         |
|----------|-----|------------|----------------|
| Original | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 967      | 66  | -901       | -93.17         |
|----------|-----|------------|----------------|
| RVV      | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 201      | 66  | -135       | -67.16         |
|----------|-----|------------|----------------|


Kernel jacobi-1d is similar enough

### Attempting to compile and run kernel jacobi-2d...

In file included from benchmarks/jacobi-2d/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:31:9: note: previous definition is here
#define DataType int
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:32:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:33:9: note: previous definition is here
#define DataFormat(start, end) start "%d" end
        ^
benchmarks/jacobi-2d/kernel.c:211:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int j = 1; j < SIZE - 1; j++) {
    ^
benchmarks/jacobi-2d/kernel.c:211:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/jacobi-2d/kernel.c:216:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int j = 1; j < SIZE - 1; j++) {
    ^
benchmarks/jacobi-2d/kernel.c:216:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 75533 less instructions
RVV executed 64590 less instructions
UVE executed 10943 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 79027    | 14437 | -64590     | -81.73         |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 79027    | 3494  | -75533     | -95.58         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 14437    | 3494  | -10943     | -75.80         |
|----------|-------|------------|----------------|


Kernel jacobi-2d is similar enough

### Attempting to compile and run kernel 3mm...

benchmarks/3mm/kernel.c:201:10: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
                for (k = 0; k < sizeK; k++)
                ^
benchmarks/3mm/kernel.c:201:10: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
benchmarks/3mm/kernel.c:201:10: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
benchmarks/3mm/kernel.c:201:10: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]

UVE executed 2948746 less instructions
RVV executed 509114 more instructions
UVE executed 3457860 less instructions than RVV
|----------|---------|------------|----------------|
| Original | RVV     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 3072447  | 3581561 | 509114     | 16.57          |
|----------|---------|------------|----------------|
| Original | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 3072447  | 123701  | -2948746   | -95.97         |
|----------|---------|------------|----------------|
| RVV      | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 3581561  | 123701  | -3457860   | -96.55         |
|----------|---------|------------|----------------|


Kernel 3mm is similar enough

### Attempting to compile and run kernel trisolv...

benchmarks/trisolv/kernel.c:286:18: remark: loop not vectorized: unsafe dependent memory operations in loop. Use #pragma loop distribute(enable) to allow loop distribution to attempt to isolate the offending operations into a separate loop
Unknown data dependence. Memory location is the same as accessed at benchmarks/trisolv/kernel.c:286:39 [-Rpass-analysis=loop-vectorize]
            x[i] -= L[i * SIZE + j] * x[j];
                 ^
benchmarks/trisolv/kernel.c:283:9: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
        for (int j = 0; j < i; ++j) {
        ^

UVE executed 9934 less instructions
RVV executed 1431 more instructions
UVE executed 11365 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 10499    | 11930 | 1431       | 13.63          |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 10499    | 565   | -9934      | -94.62         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 11930    | 565   | -11365     | -95.26         |
|----------|-------|------------|----------------|


Kernel trisolv is similar enough

### Attempting to compile and run kernel stream...

benchmarks/stream/kernel.c:383:5: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j=0; j<sizeN; j++)
    ^
benchmarks/stream/kernel.c:386:5: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j=0; j<sizeN; j++)
    ^
benchmarks/stream/kernel.c:389:5: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j=0; j<sizeN; j++)
    ^
benchmarks/stream/kernel.c:392:5: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j=0; j<sizeN; j++)
    ^

UVE executed 1356 less instructions
RVV executed 687 less instructions
UVE executed 669 less instructions than RVV
|----------|-----|------------|----------------|
| Original | RVV | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 1415     | 728 | -687       | -48.55         |
|----------|-----|------------|----------------|
| Original | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 1415     | 59  | -1356      | -95.83         |
|----------|-----|------------|----------------|
| RVV      | UVE | Difference | Difference (%) |
|----------|-----|------------|----------------|
| 728      | 59  | -669       | -91.90         |
|----------|-----|------------|----------------|


Kernel stream is similar enough

### Attempting to compile and run kernel mvt...

benchmarks/mvt/kernel.c:373:7: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
      for (int j = 0; j < sizeN; j++)
      ^
benchmarks/mvt/kernel.c:377:7: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
      for (int j = 0; j < sizeN; j++)
      ^

UVE executed 38992 less instructions
RVV executed 18069 less instructions
UVE executed 20923 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 40609    | 22540 | -18069     | -44.50         |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 40609    | 1617  | -38992     | -96.02         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 22540    | 1617  | -20923     | -92.83         |
|----------|-------|------------|----------------|


Kernel mvt is similar enough

### Attempting to compile and run kernel gemver...

benchmarks/gemver/kernel.c:627:9: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
        for (j = 0; j < sizeN; j++)
        ^
benchmarks/gemver/kernel.c:631:9: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
        for (j = 0; j < sizeN; j++)
        ^
benchmarks/gemver/kernel.c:634:5: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
    for (i = 0; i < sizeN; i++)
    ^
benchmarks/gemver/kernel.c:638:9: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
        for (j = 0; j < sizeN; j++)
        ^

UVE executed 78264 less instructions
RVV executed 39222 less instructions
UVE executed 39042 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 81315    | 42093 | -39222     | -48.23         |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 81315    | 3051  | -78264     | -96.25         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 42093    | 3051  | -39042     | -92.75         |
|----------|-------|------------|----------------|


Kernel gemver is similar enough

### Attempting to compile and run kernel gemm...

benchmarks/gemm/kernel.c:342:8: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
       for (j = 0; j < sizeJ; j++)
       ^
benchmarks/gemm/kernel.c:339:5: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
    for (j = 0; j < sizeJ; j++)
    ^

UVE executed 1237539 less instructions
RVV executed 575099 less instructions
UVE executed 662440 less instructions than RVV
|----------|--------|------------|----------------|
| Original | RVV    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 1278014  | 702915 | -575099    | -45.00         |
|----------|--------|------------|----------------|
| Original | UVE    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 1278014  | 40475  | -1237539   | -96.83         |
|----------|--------|------------|----------------|
| RVV      | UVE    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 702915   | 40475  | -662440    | -94.24         |
|----------|--------|------------|----------------|


Kernel gemm is similar enough

### Attempting to compile and run kernel convolution...

benchmarks/convolution/kernel.c:250:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (x = 1; x < PB_H - 1; x++){
        ^
benchmarks/convolution/kernel.c:250:9: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 1) [-Rpass=loop-vectorize]

UVE executed 163918 less instructions
RVV executed 184505 less instructions
UVE executed 20587 more instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 191579   | 7074  | -184505    | -96.31         |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 191579   | 27661 | -163918    | -85.56         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 7074     | 27661 | 20587      | 291.02         |
|----------|-------|------------|----------------|


Kernel convolution is similar enough

### Attempting to compile and run kernel covariance...

benchmarks/covariance/kernel.c:488:9: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
        for (i = 0; i < sizeN; i++)
        ^
benchmarks/covariance/kernel.c:502:9: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
        for (j = 0; j < sizeM; j++)
        ^
benchmarks/covariance/kernel.c:518:13: remark: vectorized loop (vectorization width: vscale x 2, interleaved count: 2) [-Rpass=loop-vectorize]
            for (k = 0; k < sizeN; k++)
            ^

RVV: Values were -934 and -933 with difference of 1 at index 61
RVV: Values were 23 and 22 with difference of 1 at index 329
RVV: Values were 237 and 236 with difference of 1 at index 330
RVV: Values were -29 and -28 with difference of 1 at index 430
RVV: Values were -934 and -933 with difference of 1 at index 551
RVV: Values were -115 and -114 with difference of 1 at index 565
RVV: Values were -929 and -928 with difference of 1 at index 599
RVV: Values were 418 and 417 with difference of 1 at index 620
RVV: Values were -418 and -417 with difference of 1 at index 644
RVV: Values were -115 and -114 with difference of 1 at index 761
RVV: Values were -203 and -202 with difference of 1 at index 922
RVV: Values were 732 and 731 with difference of 1 at index 932
RVV: Values were 418 and 417 with difference of 1 at index 1012
RVV: Values were -203 and -202 with difference of 1 at index 1118
RVV: Values were 23 and 22 with difference of 1 at index 1456
RVV: Values were 237 and 236 with difference of 1 at index 1506
RVV: Values were -29 and -28 with difference of 1 at index 1508
RVV: Values were 732 and 731 with difference of 1 at index 1618
RVV: Values were -484 and -483 with difference of 1 at index 1845
RVV: Values were 736 and 735 with difference of 1 at index 2043
RVV: Values were 736 and 735 with difference of 1 at index 2190
RVV: Values were -418 and -417 with difference of 1 at index 2212
RVV: Values were -484 and -483 with difference of 1 at index 2286
RVV: Values were -929 and -928 with difference of 1 at index 2461
UVE executed 665846 less instructions
RVV executed 344733 less instructions
UVE executed 321113 less instructions than RVV
|----------|--------|------------|----------------|
| Original | RVV    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 689780   | 345047 | -344733    | -49.98         |
|----------|--------|------------|----------------|
| Original | UVE    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 689780   | 23934  | -665846    | -96.53         |
|----------|--------|------------|----------------|
| RVV      | UVE    | Difference | Difference (%) |
|----------|--------|------------|----------------|
| 345047   | 23934  | -321113    | -93.06         |
|----------|--------|------------|----------------|


Kernel covariance: Did not generate result similar enough

### Attempting to compile and run kernel sgd...

In file included from benchmarks/sgd/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:31:9: note: previous definition is here
#define DataType int
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:32:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:33:9: note: previous definition is here
#define DataFormat(start, end) start "%d" end
        ^
benchmarks/sgd/kernel.c:276:13: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
            for (j = 0; j /*< BATCH_SIZE && b + j*/ < PB_N; j++)
            ^
benchmarks/sgd/kernel.c:276:13: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:265:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (i = 0; i < PB_N /*BATCH_SIZE*/; i++)
        ^
benchmarks/sgd/kernel.c:265:9: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:257:9: remark: loop not vectorized: cannot identify array bounds [-Rpass-analysis=loop-vectorize]
        for (i = 0; i /*< BATCH_SIZE && b+i*/ < PB_N; i++) {
        ^
benchmarks/sgd/kernel.c:257:9: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
benchmarks/sgd/kernel.c:289:5: remark: loop not vectorized: cannot identify array bounds [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++) {
    ^
benchmarks/sgd/kernel.c:289:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
benchmarks/sgd/kernel.c:301:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:301:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:306:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:306:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:310:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:310:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:289:5: remark: loop not vectorized: cannot identify array bounds [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++) {
    ^
benchmarks/sgd/kernel.c:289:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
benchmarks/sgd/kernel.c:301:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:301:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:306:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:306:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
benchmarks/sgd/kernel.c:310:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < PB_N; i++)
    ^
benchmarks/sgd/kernel.c:310:5: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 6352731 less instructions
RVV executed 5574941 less instructions
UVE executed 777790 less instructions than RVV
|----------|---------|------------|----------------|
| Original | RVV     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 7031115  | 1456174 | -5574941   | -79.29         |
|----------|---------|------------|----------------|
| Original | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 7031115  | 678384  | -6352731   | -90.35         |
|----------|---------|------------|----------------|
| RVV      | UVE     | Difference | Difference (%) |
|----------|---------|------------|----------------|
| 1456174  | 678384  | -777790    | -53.41         |
|----------|---------|------------|----------------|


Kernel sgd is similar enough

### Attempting to compile and run kernel spmv_ellpack...

In file included from benchmarks/spmv_ellpack/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:31:9: note: previous definition is here
#define DataType int
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:32:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:33:9: note: previous definition is here
#define DataFormat(start, end) start "%d" end
        ^
benchmarks/spmv_ellpack/kernel.c:62:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (j = 0; j < L; j++) {
        ^
benchmarks/spmv_ellpack/kernel.c:62:9: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 46932 less instructions
RVV executed 22223 less instructions
UVE executed 24709 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 51390    | 29167 | -22223     | -43.24         |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 51390    | 4458  | -46932     | -91.33         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 29167    | 4458  | -24709     | -84.72         |
|----------|-------|------------|----------------|


Kernel spmv_ellpack is similar enough

### Attempting to compile and run kernel spmv_ellpack_delimiters...

In file included from benchmarks/spmv_ellpack_delimiters/kernel.c:1:
../Functions.h:47:9: warning: 'DataType' macro redefined [-Wmacro-redefined]
#define DataType double
        ^
../Functions.h:31:9: note: previous definition is here
#define DataType int
        ^
../Functions.h:48:9: warning: 'DataSet' macro redefined [-Wmacro-redefined]
#define DataSet fDataset
        ^
../Functions.h:32:9: note: previous definition is here
#define DataSet iDataset
        ^
../Functions.h:51:9: warning: 'DataFormat' macro redefined [-Wmacro-redefined]
#define DataFormat(start, end) start "%3.6lf" end
        ^
../Functions.h:33:9: note: previous definition is here
#define DataFormat(start, end) start "%d" end
        ^
benchmarks/spmv_ellpack_delimiters/kernel.c:75:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
        for (int j = 0; j < cur_nnz; j++) {
        ^
benchmarks/spmv_ellpack_delimiters/kernel.c:75:9: remark: vectorized loop (vectorization width: vscale x 1, interleaved count: 1) [-Rpass=loop-vectorize]
3 warnings generated.

UVE executed 21394 less instructions
RVV executed 3888 more instructions
UVE executed 25282 less instructions than RVV
|----------|-------|------------|----------------|
| Original | RVV   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 24881    | 28769 | 3888       | 15.63          |
|----------|-------|------------|----------------|
| Original | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 24881    | 3487  | -21394     | -85.99         |
|----------|-------|------------|----------------|
| RVV      | UVE   | Difference | Difference (%) |
|----------|-------|------------|----------------|
| 28769    | 3487  | -25282     | -87.88         |
|----------|-------|------------|----------------|


Kernel spmv_ellpack_delimiters is similar enough
